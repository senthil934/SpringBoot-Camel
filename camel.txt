What Apache Camel solves ?
1. Enterprise Integrations are complex
    - Whenever we talk enterprises they have 100's of appl. This appl ha complex communication patterns and use variety of transports like HTTP, queues etc and variety of protocols like HTTP, JMS, AMQP

2. Evolution of Cloud and Microservices makes enterprise Integration even more complex.
     Consider we have microservice1 which communicates with other microservices. It might be using different transport to communicate with each of microservices. Microservice1 calls microservice2 as rest api, however microservice1 use queue to talk with microservice3 which uses wide variety of protocol and communication approach 

3. How we simplify Enterprise Integration or how we simplify code that we write to enable microservice1 to talk to other services and adhere all best practises ?     - We can follow Enterprise Integration pattern, however understanding and implement  is very challenge so we go for Apache camel

Apache camel
   - Open source enterprise integration framework - we can easily integrate systems which are consuming and producing data
   - Also helps to implement patterns around microservice architecture and cloud
   - very lean (ie) lightweight and extensible 
         Apache camel can integrate with other frameworks like Kafka, Active MQ, JMS, make HTTP calls, talk to cloud services like AWS lambda so camel is lightweight because camel use Component architecture
         There are 100's of components which are provided for different databases, message queues, apis and cloud integrations
         It also supports 200+ protocols, transports,data formats and 300+ converters between these data formats
         Provides Domain Specific Language (DSL) customized to suit needs of Application Integration

Example: springbootversion-2.4.2,camelversion-3.7.0
1. Create SpringBoot-Camel1 project with web, dev tools,actuator,apache camel dependency
2. Create SpringBoot-Camel2 project with web, dev tools,actuator,apache camel dependency
<dependency>
  <groupId>org.apache.camel.springboot</groupId>
  <artifactId>camel-spring-boot-starter</artifactId>
  <version>3.7.0</version>
</dependency>
3. Build camel route
   - Create MyFirstTimerRoute.class in SpringBoot-Camel1 where we use timer to schedule things and run at regular intervals 
   - To build a route, we extend RouteBuilder class and override configure() where we configure all our routes
     Actually Camel is integration framework, so lets say we want to listen to a queue and whatever input that comes in we want to do some transformation on it and finally save it to a database. This sequence of steps is called route.
     In this specific route, we have 2 endpoints, one endpoint is queue we are listening on a queue and saving into database that is other endpoint
    In this case we use timer to actually trigger messages and we will not save them to database instead we will write into log.

  - In order to define the route, we want to specify the starting point of route from where for that we use "from()" method. Here we specify the timer which is timer endpoint
     from("timer:first-timer")
   We are listening on timer endpoint so whenever there is a new message on the timer endpoint, we want to send it to a log using "to()" 
     from("timer:first-timer").to("log:first-timer");
Here timer and log are keywords. 

4. Start the appl, so in SpringBoot-Camel1 console we can see "Total 1 routes of which 1 route started" and print lot of logs will be printed 
   Here Timer generates a null message every second and we are picking it up and sending to log

5. Now instead of null message we add something meaningful constant message using transform() and constant()
   from("timer:first-timer")
   .transform().constant("My constant message")
   .to("log:first-timer");
We are picking up message from the timer endpoint and transforming message as a constant and send out to log.

6. Start the appl, now we can see the body to "My Constant message"

7. Now we can add date and time to the message 
from("timer:first-timer")
   .transform().constant(LocalDateTime.now())
   .to("log:first-timer");
So now we can the body of message to current date and time

8. But in realtime we wont have a constant message, so we see how to make message dynamic 
   We create a bean to generate that message, so we create separate class GetCurrentTimeBean with getCurrentTime() and autowire it 
@Component
class GetCurrentTimeBean {
	public String getCurrentTime() {
		return "Time now is "+LocalDateTime.now();
	}
}

and call that bean to generate the message dynamically using 
    from("timer:first-timer")
   .bean("getCurrentTimeBean")
   .to("log:first-timer");

If we have multiple methods in bean then we have provide the method name 
      from("timer:first-timer")
   .bean("getCurrentTimeBean","methodname")
   .to("log:first-timer");
Now Spring is doing a component scan of this particular package and find the component and create a bean with the bean "getCurrentTimeBean". We use Spring bean to do transformation and this bean would be invoked each time  it receives message on this specific endpoint 

9. Start the appl, now we can see time will be different 
   When u want to pickup a message from queue, u want to typically do a transformation around and send out to database 

10. There are 2 types of operation that u can do within specific route (ie) processing and transformation
   Once we receive a message we want to do operation or something which does not make a change on the body of the message itself, that is called processing 
   However if you are doing anything that changes the body of the message then that is called transformation
  Previously we transform null message to constant message using transform() and bean(). In addition to that we need to do some processing by taking body of the message.
  So we create component called SimpleLoggingProcessingComponent with process() which takes message as input 
@Component
class SimpleLoggingProcessingComponent {
	private Logger log=LoggerFactory.getLogger(SimpleLoggingProcessingComponent.class);
	
	public void process(String message) {
	   log.info("SimpleLoggingProcessingComponent {}",message);
	}
}

11. Now we make use of SimpleLoggingProcessingComponent to process our thing. So we autowired SimpleLoggingProcessingComponent
      from("timer:first-timer")
	.log("${body}")
	.transform().constant("My constant message")
		.log("${body}")
		   .bean(getCurrentTimeBean)
		   .log("${body}")
		   .bean(loggingComponent)
		   .log("${body}")
	       .to("log:first-timer");

In this case if we do log body after loggingComponent there will not any change in the body of message.
   The difference between GetCurrentTimeBean and SimpleLoggingProcessingComponent is return type of method. If ur return type is String we can change the method body and when we call bean method with void then it means we are doing some kind of processing 

12. Previoulsy we done processing and transformation. Whenever we do transform we have method called transform() which can be used for transformation or we can use bean() for transformation. We also done processing using bean().
   In addition we can do processing of message by creating processors 
   .process(new SimpleLoggingProcessor())

	from("timer:first-timer")
		.log("${body}")
		.transform().constant("My constant message")
		.log("${body}")
		   .bean(getCurrentTimeBean)
		   .log("${body}")
		   .bean(loggingComponent)
		   .log("${body}")
		   .process(new SimpleLoggingProcessor())
	       .to("log:first-timer");

Create SimpleLoggingProcessor which implements Processor and override process()

class SimpleLoggingProcessor implements Processor {
	private Logger log=LoggerFactory.getLogger(SimpleLoggingProcessor.class);

	@Override
	public void process(Exchange exchange) throws Exception {
		log.info("SimpleLoggingProcessor {}",exchange);
	}

}

13. Start the appl, we can see the body of message using Processor
   Finally we done transformation using transform() or bean(), Processing is done using process() or bean()

14. Now we are going to process the files for that we create new class called MyFileRouter which extends RouteBuilder and override configure()
   Now we get all files from input folder and move it to output folder 
from("file:files/input").to("file:files/output");

15. Start the appl, refresh the project, now u can see files/input folder inside the project. So whatever we create in input folder will move to output folder

16. Goto github.com/in28minutes/camel and download the repository, from that copy all files present in 01.files folder and copy to input folder of the project.
   So as soon u copy the files to input folder, it will move to output folder, when u refresh the project and no log will be printed in the console

17. Now inorder to print the log, we use
.from("file:files/input")
.log("${body}")
.to("file:files/output")
Now copy only one file from output to input folder, refresh the project,then it automatically move to output folder, then we can see body of file in the console.
   As per the camel, we are picking up file from input folder and moving to another endpoint (ie) output folder, as part of processing we are printing the content of the body.

18. Now we want to send message to ActiveMQ from SpringBoot-Camel1 and SpringBoot-Camel2 service want to receive that message 
    To do that we need to launch ActiveMq
-Download activemq from https://activemq.apache.org/components/classic/download/
-Run bin>activemq start   
-In case if it shows already bind exception, then conf/activemq.xml, change in <transporter> as 61616 to 6616 and  5672 to 5762
- Run localhost:8161 with admin,admin
- click Manage ActiveMQ Broker

19. Now we want SpringBoot-Camel1 to put message on ActiveMQ
   Create ActiveMQSenderRouter class which extends RouteBuilder and override configure(). Here we want to create a timer and in regular interval we want to put that message in queue
    from("timer:active-mq-timer?period=10000")
    .transform().constant("My message for Active MQ")
    .log("${body}")
    .to("activemq:my-activemq-queue");
Every 10sec we are generating message to activemq

20. Since timer,log endpoints are predefined that comes from camel, but queue and database endpoint has to be created by providing the dependency. In our case we need to create endpoint "activemq" so we provide dependency
<dependency>		<groupId>org.apache.camel.springboot</groupId>
<artifactId>camel-spring-boot-starter</artifactId>
<version>3.7.0</version>
</dependency> 
  - In application.properties we configure
spring.activemq.broker-url=tcp://localhost:6616
  - Start the appl, now we can see in the console activemq has been started 
  - Goto ActiveMQ in broswer-click Queues-now u can see 
my-activemq-queue name will be displayed
  - If u refresh the activemq, u can see each time message will be added in the queue
  - If u see the console,u can see "My message for Active MQ" will be displayed
  

21. Now we want to consume the message in SpringBoot-Camel2
  - Change port in application.properties
        server.port=8000
        spring.activemq.broker-url=tcp://localhost:6616
  - Add activemq dependency in SpringBoot-Camel2
<dependency>		<groupId>org.apache.camel.springboot</groupId>
<artifactId>camel-spring-boot-starter</artifactId>
<version>3.7.0</version>
</dependency> 
  - Create ActiveMQReceiverRouter class which extends RouteBuilder and override configure() with
  from("activemq:my-activemq-queue")
  .to("log:received-message-from-active-mq");
  - Start SpringBoot-Camel2 appl, and in console we can see so many received messages

Note: For Camel version 3.7.0 will be support by JDK11


Spring Boot + Apache Camel Integration
   - Normally in an enterprise there is lot of application running and some of them are legacy appl and some are new appl, legacy means the appl design in old technology so interaction of those appl is not easy since implementation of the application is different so their message format may be different
   - Suppose one appl is giving XML response and client expecting JSON so there will need to perform marshalling and unmarshalling kind of things
   - However this are point to point integration so assume that legacy appl change its implementation or change its business in future so the new appl is developed with some latest technology. So interacting with 2 appl will get impacted for the business change
   - Instead of directly tightly coupled the appl each other we can use additional layer to mediate the difference between the application.
   - Apache camel is rule based routing and mediation engine that provides a jave object based implementation of enterprise integration pattern
   - Apache camel is the lightweight framework, it can be deployed in any container like tomcat,jboss. Apache camel provides bunch of components so with these components we can interact with multiple endpoints and we can interact with multiple external application. For example we have activemq component and we exposing some endpoint, so with the help of HTTP, or FTP we can consume the activemq provided endpoint 
  - In realtime from one appl we get the data from database or files or activemq,rabbitmq or by calling some HTTP protocols and sending that data to different appl and again those data we are storing in database or files or queues.

Here we see how to transfer the records from one file to another file, filter the file, process the file, process the multiple files from one dir to another dir

1. Create SpringBoot-Camel3 with camel, devtools
2. Now we move data from one file to another file, create folder "a" and some file called "file1.txt", file2.txt,file3.txt and "b". Now we move data from folder "a" to folder "b"
3. Create FileRouter class which extends RouteBuilder and override configure()
  from("file:C:\\GitDemo\\a").to("file:C:\\GitDemo\\b"); 
4. Specify property in application.properties
camel.springboot.main-run-controller=true
5. Start the application
    - Now we see all files moved from "a" to "b" folder
    - Now inside "a" folder it creates .camel folder and move all files to that folder
6. In order to remove that we have to provide
from("file:C:\\GitDemo\\a?noop=true").to("file:C:\\GitDemo\\b"); 
7. Delete all files from "b" folder, copy all file from .camel folder to "a" folder and delete .camel folder
8. Start the appl, now u cant see .camel folder and files will be moved from "a" folder to "b" folder

9. Now we want to transfer specific file from "a" folder to "b" folder using filter() and Exchange.FILE_NAME which startswith myfile
from("file:C:\\GitDemo\\a?noop=true").filter(header(Exchange.FILE_NAME).startsWith(type))
		.to("file:C:\\GitDemo\\b");

10. Now we want to transfer the file which contain content called "Java"
from("file:C:\\GitDemo\\a?noop=true").filter(body().startsWith(content))
		.to("file:C:\\GitDemo\\b");

11. Now we read the text file and process into csv format 
  Create only file1.txt inside "a" folder with 
Raj Kumar  
Ram Kumar
   Now when we run, it create records.csv file into "b" folder separated with ","

12. Now we do multiprocess operation, where assume we have bank appl which contains a text file which contains
26234 Ram Closed
26235 Sam Pending
26236 Raj Interest
Now we want to separate the files based on closed, pending and interest, for that we write logic using process with different filter 
  - We need to add one dependency
<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-csv</artifactId>
			<version>2.21.0</version>
		</dependency>


Integrate Apache Camel with Spring Boot to create REST API
1. Create SpringBoot-Camel4 with web, devtools and camel
<dependency>		<groupId>org.apache.camel</groupId>
<artifactId>camel-servlet-starter</artifactId>
<version>2.24.0</version>
</dependency>
<dependency>
<groupId>org.apache.camel</groupId>
<artifactId>camel-jackson</artifactId>
<version>2.24.0</version>
</dependency>
   - We add Camel-servlet(we are not using DispatcherServlet as we are not writing Spring REST) and Camel-Jackson same like Jackson dependency used to convert json to object and object to json

2. Create ApplicationResource.class which is similar to our controller which extends RouteBuilder and override configure()
   - We need camel component using restConfiguration() and we specify camel servlet and specify port and localhost and expect JSON so we specify Binding 
restConfiguration().component("servlet").port(9090).host("localhost").bindingMode(RestBindingMode.json);
  - Now we need to expose restapi "/hello" which prints "Welcome to camel"
rest().get("/hello").produces(MediaType.APPLICATION_JSON_VALUE).route()
				.setBody(constant("Welcome to Camel")).endRest();
   
3. Enable camel servlet in properties file 
camel.component.servlet.mapping.context-path=/*
server.port=9090

4. Start the appl and run localhost:9090/hello which prints "Welcome to Camel"

5. Now we want to consume custom object called Order object as json
   - Create Order class with id,name, price
   - Create OrderService class and initialize order object so that we populate those values in our route, so for post request we have addOrder() and for get request we have getOrders()

6. Now in resource, we need to invoke OrderService so we have to inject it 
   @Autowired
	private OrderService service;

7. Now we write rest endpoints to get list of orders 
rest().get("/getOrders").produces(MediaType.APPLICATION_JSON_VALUE).route().setBody(() -> service.getOrders())
				.endRest();

8. Start the appl and run localhost:9090/getOrders

9. Now we write rest endpoint for POST request, we cant directly add value using setBody() so we have to use Processor component
   Since addOrder() takes Order as input and Order as output, we specify using type() and outType() and finally we need to process it
rest().post("/addOrder").consumes(MediaType.APPLICATION_JSON_VALUE).type(Order.class).outType(Order.class)
				.route().process(processor).endRest();

10. We create OrderProcessor which implements Processor and override process() which handle ur input,Exchange will extract the value and add in our service 

11. Now we need to inject OrderProcessor, it is not in our control, it is called by Camel so we cant inject directly using @Autowired so we use @BeanInject 

12. Start the appl, in Postman with POST request give localhost:9090/addOrder
   Body - Raw - Application/json
{
   "id":100,
   "name":"tv",
   "price":2000
}
Click Send

Now verify using get method in browser using localhost:9090/getOrder
  - Now we see all 5 orders 
   

Spring Boot + Apache Camel + Apache Kafka

1. Create SpringBoot+Camel5 with web,
<dependency>
		    <groupId>org.apache.camel</groupId>
		    <artifactId>camel-spring-boot-starter</artifactId>
		    <version>2.17.3</version>
		</dependency>
		<dependency>
		    <groupId>org.apache.camel</groupId>
		    <artifactId>camel-kafka</artifactId>
		    <version>2.16.3</version>
		</dependency>
		<dependency>
		    <groupId>org.scala-lang</groupId>
		    <artifactId>scala-library</artifactId>
		    <version>2.11.0</version>
		</dependency>

2. Now we create rest endpoint to contact kafka endpoint, so we create route to give kafka info in separate class KafkaRoute which extends RouteBuilder and override configure()
   We specify topicname, kafkaserver, zookeeper, serializerClass used for serialization 

3. We create rest endpoint to trigger kafka component called test()
   We also need Camel template to send message to camel component 

4. When we give "/test" it will send message to kafka

5. Start kafka
C:\Softwares\kafka_2.12-2.0.0\config>zookeeper-server-start.bat zookeeper.properties

C:\Softwares\kafka_2.12-2.0.0\config>kafka-server-start.bat server.properties
6. Start the appl, run as localhost:3000/test and now the message will display in kafka server

7. May be try to restart the kafka once again and give

C:\Microservice1\SpringBoot-Camel5>kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic testtopic1 --from-beginning



EIP(Enterprise Integration Pattern) Patterns
   - It is design pattern used in enterprise appl integration and message oriented middleware in the form of pattern language
  
In SpringBoot-Camel1, we have provided different pattern

1. EIP Splitter
    from("file:C:/GitDemo/input").split().tokenize("\n").to("activemq:my-activemq-queue1");
   - It will split the 4 words based on newline in file1.txt in input folder and send to activemq

2. EIP content based router 
      Content-Based Router inspects the content of a message and routes it to another channel based on the content of the message. It is something like "if-else" loop run in camel
    - Now it will split the file based on \n and move to another route "direct:test".
    - Now it comes to "direct:test" and using choice(), it checks what are the contents of the message accordingly it will message to the queue. If it contains "queue1" it will send to activemq-queue1 and respectively
    - Create file test.txt in input folder with 
1
2
queue1
queue2
queue3
    - Run appl, now 4 queues will be created depending on the contents 
activemq-queue1 - 1
activemq-queue2 - 1
activemq-queue3 - 1
activemq-queue4 - 2

3. EIP-Message Filter
       A Message Filter is a special form of a Content-Based Router. It examines the message content and passes the message to another channel if the message content matches certain criteria

4. EIP - Recepient list
       A Content-Based Router allows us to route a message to the correct system based on message content. Whatever previous message we have seen it was previously only decided if the message contain some content go to particular queue. But suppose at runtime we have to decide the name of queue depending on the content of message then we use recepient list
       It decide at runtime what all the recepients of the message
     - Now it will split the file based on \n and move to another route "direct:test".
     - In "direct:test" we have written a Processor, so whatever the message which is present in exchange it stores in recipients string. Using that string we have created a queue. We add recipientqueue to the header variable queue and get variable queue from header 
     - Create file called test.txt with 
1
2
     - Run the appl, and check whether it created 1,2 queue


5. EIP - Wire Tap
       Wire Tap allows you to route messages to a separate location while they are being forwarded to the ultimate destination.
      - In "direct:test1", if some unwanted thing happens to message and that message routed to "DeadLetterQueue" and goes to "direct:test2" for processing 
      - Create file called test.txt with
test
      - Run the appl, it will create queue DeadLetterQueue and prints "test" in console



Spring Boot Apache Camel - Consume REST API 
    Using Spring Boot we expose some REST API and then using Apache Camel route we consume those REST api

1. Create SpringBoot-Rest with web dependency
2. Create Employee model class 
3. Create Controller class 
The GET API will accept an id as a request parameter and create an employee object using the passed id and return it as response.
The POST API will accept an employee object as request body. Using the parameters of the employee object it will create another employee object and return it as response.

4. Create Maven project called CamelProject which consumes this API 
5. We provided Camel-http dependency using http component we will calling services or apis exposed by spring boot and consuming them
6. Create Employee model class which will passed during POST request 
7. We create camel Processor called EmployeeProcessor which will create Employee object and marshall it xml and then set as body for exchange 
8. Next we create SimpleRouteBuilder class where we define routes for consuming GET and POST api 
   Here we have get input from "input" folder which wil trigger this route and in header we set http method as "GET" and made the request to spring boot appl and call MyProcessor which just prints the response after webservice is called 
   In post request we get input from "input" folder and call CreateEmployeeProcessor which create new Employee object and marshall to new JSON format and send the header as POST and content and send the request to Spring boot appl and call MyProcessor which just prints the response after webservice is called 
9. Create applicationContext.xml that call route builder class 
10. Create main class

11. Start springboot application
12. Start main class from camelProject
13. Now create text file inside input folder which makes rest call to SpringBoot appl "employee" and create employee object . Once done in Main application we can see employee object will be created and prints 






